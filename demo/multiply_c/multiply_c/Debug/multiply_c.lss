
multiply_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000048c  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000094  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000002a  00000000  00000000  000004bb  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000004e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fdd  00000000  00000000  0000053d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000088c  00000000  00000000  0000151a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b0  00000000  00000000  00001da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  00002258  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027b  00000000  00000000  00002354  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000068c  00000000  00000000  000025cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000003ea  000003ea  0000047e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.LCD_Command 0000005c  0000018c  0000018c  00000220  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.LCD_Char 0000005c  000001e8  000001e8  0000027c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.LCD_Init 0000003c  00000318  00000318  000003ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.LCD_String 00000040  000002d8  000002d8  0000036c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LCD_String_P 00000030  00000354  00000354  000003e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 00000048  00000094  00000094  00000128  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.itoa    000000a6  000000e6  000000e6  0000017a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.LCD_Number 0000004a  00000244  00000244  000002d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.main    0000004a  0000028e  0000028e  00000322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .progmemx.data.result_str 00000009  000000dc  000000dc  00000170  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 24 .text.libgcc.div 00000028  00000384  00000384  00000418  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.libgcc.div 00000028  000003ac  000003ac  00000440  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__dummy_fini 00000002  000003f2  000003f2  00000486  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_funcs_on_exit 00000002  000003f4  000003f4  00000488  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_simulator_exit 00000002  000003f6  000003f6  0000048a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.exit    00000016  000003d4  000003d4  00000468  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text._Exit   00000004  000003ee  000003ee  00000482  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
   8:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
   c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  10:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  14:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  18:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  1c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  20:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  24:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  28:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  2c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  30:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  34:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  38:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  3c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  40:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  44:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  48:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  4c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  50:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  54:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  58:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  5c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  60:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  64:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  68:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  6c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  70:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  74:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
  78:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 47 01 	call	0x28e	; 0x28e <main>
  8c:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <exit>

00000090 <_exit>:
  90:	f8 94       	cli

00000092 <__stop_program>:
  92:	ff cf       	rjmp	.-2      	; 0x92 <__stop_program>

Disassembly of section .text:

000003ea <__bad_interrupt>:
 3ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.LCD_Command:

0000018c <LCD_Command>:
	
	return 0;
}

void LCD_Command(unsigned char cmnd) {
	PORTB = (PORTB & 0x0F) | (cmnd & 0xF0); // Send upper nibble
 18c:	95 b1       	in	r25, 0x05	; 5
 18e:	9f 70       	andi	r25, 0x0F	; 15
 190:	28 2f       	mov	r18, r24
 192:	20 7f       	andi	r18, 0xF0	; 240
 194:	92 2b       	or	r25, r18
 196:	95 b9       	out	0x05, r25	; 5
	PORTB &= ~ (1<<LCD_RS); // RS = 0 for command
 198:	95 b1       	in	r25, 0x05	; 5
 19a:	9e 7f       	andi	r25, 0xFE	; 254
 19c:	95 b9       	out	0x05, r25	; 5
	PORTB &= ~ (1<<LCD_RW); // RW = 0 for write
 19e:	95 b1       	in	r25, 0x05	; 5
 1a0:	9d 7f       	andi	r25, 0xFD	; 253
 1a2:	95 b9       	out	0x05, r25	; 5
	PORTB |= (1<<LCD_E); // Enable pulse
 1a4:	95 b1       	in	r25, 0x05	; 5
 1a6:	94 60       	ori	r25, 0x04	; 4
 1a8:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	00 00       	nop
	_delay_us(1);
	PORTB &= ~ (1<<LCD_E);
 1ac:	95 b1       	in	r25, 0x05	; 5
 1ae:	9b 7f       	andi	r25, 0xFB	; 251
 1b0:	95 b9       	out	0x05, r25	; 5
 1b2:	32 e4       	ldi	r19, 0x42	; 66
 1b4:	3a 95       	dec	r19
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCD_Command+0x28>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <LCD_Command+0x2e>

	_delay_us(200);

	PORTB = (PORTB & 0x0F) | (cmnd << 4); // Send lower nibble
 1ba:	25 b1       	in	r18, 0x05	; 5
 1bc:	30 e1       	ldi	r19, 0x10	; 16
 1be:	83 9f       	mul	r24, r19
 1c0:	c0 01       	movw	r24, r0
 1c2:	11 24       	eor	r1, r1
 1c4:	92 2f       	mov	r25, r18
 1c6:	9f 70       	andi	r25, 0x0F	; 15
 1c8:	89 2b       	or	r24, r25
 1ca:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<LCD_E);
 1cc:	85 b1       	in	r24, 0x05	; 5
 1ce:	84 60       	ori	r24, 0x04	; 4
 1d0:	85 b9       	out	0x05, r24	; 5
 1d2:	00 00       	nop
	_delay_us(1);
	PORTB &= ~ (1<<LCD_E);
 1d4:	85 b1       	in	r24, 0x05	; 5
 1d6:	8b 7f       	andi	r24, 0xFB	; 251
 1d8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	83 ef       	ldi	r24, 0xF3	; 243
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <LCD_Command+0x52>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <LCD_Command+0x58>
 1e4:	00 00       	nop
 1e6:	08 95       	ret

Disassembly of section .text.LCD_Char:

000001e8 <LCD_Char>:
	_delay_ms(2);
}

void LCD_Char(unsigned char data) {
	PORTB = (PORTB & 0x0F) | (data & 0xF0); // Send upper nibble
 1e8:	95 b1       	in	r25, 0x05	; 5
 1ea:	9f 70       	andi	r25, 0x0F	; 15
 1ec:	28 2f       	mov	r18, r24
 1ee:	20 7f       	andi	r18, 0xF0	; 240
 1f0:	92 2b       	or	r25, r18
 1f2:	95 b9       	out	0x05, r25	; 5
	PORTB |= (1<<LCD_RS); // RS = 1 for data
 1f4:	95 b1       	in	r25, 0x05	; 5
 1f6:	91 60       	ori	r25, 0x01	; 1
 1f8:	95 b9       	out	0x05, r25	; 5
	PORTB &= ~ (1<<LCD_RW); // RW = 0 for write
 1fa:	95 b1       	in	r25, 0x05	; 5
 1fc:	9d 7f       	andi	r25, 0xFD	; 253
 1fe:	95 b9       	out	0x05, r25	; 5
	PORTB |= (1<<LCD_E); // Enable pulse
 200:	95 b1       	in	r25, 0x05	; 5
 202:	94 60       	ori	r25, 0x04	; 4
 204:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 206:	00 00       	nop
	_delay_us(1);
	PORTB &= ~ (1<<LCD_E);
 208:	95 b1       	in	r25, 0x05	; 5
 20a:	9b 7f       	andi	r25, 0xFB	; 251
 20c:	95 b9       	out	0x05, r25	; 5
 20e:	32 e4       	ldi	r19, 0x42	; 66
 210:	3a 95       	dec	r19
 212:	f1 f7       	brne	.-4      	; 0x210 <LCD_Char+0x28>
 214:	00 c0       	rjmp	.+0      	; 0x216 <LCD_Char+0x2e>

	_delay_us(200);

	PORTB = (PORTB & 0x0F) | (data << 4); // Send lower nibble
 216:	25 b1       	in	r18, 0x05	; 5
 218:	30 e1       	ldi	r19, 0x10	; 16
 21a:	83 9f       	mul	r24, r19
 21c:	c0 01       	movw	r24, r0
 21e:	11 24       	eor	r1, r1
 220:	92 2f       	mov	r25, r18
 222:	9f 70       	andi	r25, 0x0F	; 15
 224:	89 2b       	or	r24, r25
 226:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<LCD_E);
 228:	85 b1       	in	r24, 0x05	; 5
 22a:	84 60       	ori	r24, 0x04	; 4
 22c:	85 b9       	out	0x05, r24	; 5
 22e:	00 00       	nop
	_delay_us(1);
	PORTB &= ~ (1<<LCD_E);
 230:	85 b1       	in	r24, 0x05	; 5
 232:	8b 7f       	andi	r24, 0xFB	; 251
 234:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	83 ef       	ldi	r24, 0xF3	; 243
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_Char+0x52>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_Char+0x58>
 240:	00 00       	nop
 242:	08 95       	ret

Disassembly of section .text.LCD_Init:

00000318 <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init(void) {
	DDRB = 0xFF; // Configure PORTB as output
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	84 b9       	out	0x04, r24	; 4
 31c:	87 e8       	ldi	r24, 0x87	; 135
 31e:	93 e1       	ldi	r25, 0x13	; 19
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <LCD_Init+0x8>
 324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_Init+0xe>
 326:	00 00       	nop
	_delay_ms(20);
	
	LCD_Command(0x02); // Initialize LCD in 4-bit mode
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_Command>
	LCD_Command(0x28); // 2 lines, 5x7 matrix
 32e:	88 e2       	ldi	r24, 0x28	; 40
 330:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_Command>
	LCD_Command(0x0C); // Display on, cursor off
 334:	8c e0       	ldi	r24, 0x0C	; 12
 336:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_Command>
	LCD_Command(0x06); // Increment cursor (shift cursor to right)
 33a:	86 e0       	ldi	r24, 0x06	; 6
 33c:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_Command>
	LCD_Command(0x01); // Clear display screen
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_Command>
 346:	83 ef       	ldi	r24, 0xF3	; 243
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <LCD_Init+0x32>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <LCD_Init+0x38>
 350:	00 00       	nop
 352:	08 95       	ret

Disassembly of section .text.LCD_String:

000002d8 <LCD_String>:
	_delay_ms(2);
}

void LCD_String(const char *str) {
 2d8:	cf 92       	push	r12
 2da:	df 92       	push	r13
 2dc:	ef 92       	push	r14
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	6b 01       	movw	r12, r22
 2e4:	e8 2e       	mov	r14, r24
	int i;
	for(i=0; str[i]!=0; i++) {
 2e6:	c0 e0       	ldi	r28, 0x00	; 0
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
 2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <LCD_String+0x1a>
		LCD_Char(str[i]);
 2ec:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_Char>
	_delay_ms(2);
}

void LCD_String(const char *str) {
	int i;
	for(i=0; str[i]!=0; i++) {
 2f0:	21 96       	adiw	r28, 0x01	; 1
 2f2:	ae 2d       	mov	r26, r14
 2f4:	c6 01       	movw	r24, r12
 2f6:	8c 0f       	add	r24, r28
 2f8:	9d 1f       	adc	r25, r29
 2fa:	a1 1d       	adc	r26, r1
 2fc:	d7 fd       	sbrc	r29, 7
 2fe:	aa 95       	dec	r26
 300:	fc 01       	movw	r30, r24
 302:	84 91       	lpm	r24, Z
 304:	a7 fd       	sbrc	r26, 7
 306:	80 81       	ld	r24, Z
 308:	81 11       	cpse	r24, r1
 30a:	f0 cf       	rjmp	.-32     	; 0x2ec <LCD_String+0x14>
		LCD_Char(str[i]);
	}
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	ef 90       	pop	r14
 312:	df 90       	pop	r13
 314:	cf 90       	pop	r12
 316:	08 95       	ret

Disassembly of section .text.LCD_String_P:

00000354 <LCD_String_P>:

void LCD_String_P(const char *str) {
 354:	cf 92       	push	r12
 356:	df 92       	push	r13
 358:	ef 92       	push	r14
 35a:	a8 2f       	mov	r26, r24
 35c:	cb 01       	movw	r24, r22
	char c;
	while ((c = pgm_read_byte(str++))) {
 35e:	04 c0       	rjmp	.+8      	; 0x368 <LCD_String_P+0x14>
		LCD_Char(c);
 360:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_Char>
	}
}

void LCD_String_P(const char *str) {
	char c;
	while ((c = pgm_read_byte(str++))) {
 364:	ae 2d       	mov	r26, r14
 366:	c6 01       	movw	r24, r12
 368:	6c 01       	movw	r12, r24
 36a:	ea 2e       	mov	r14, r26
 36c:	2f ef       	ldi	r18, 0xFF	; 255
 36e:	c2 1a       	sub	r12, r18
 370:	d2 0a       	sbc	r13, r18
 372:	e2 0a       	sbc	r14, r18
 374:	fc 01       	movw	r30, r24
 376:	84 91       	lpm	r24, Z
 378:	81 11       	cpse	r24, r1
 37a:	f2 cf       	rjmp	.-28     	; 0x360 <LCD_String_P+0xc>
		LCD_Char(c);
	}
}
 37c:	ef 90       	pop	r14
 37e:	df 90       	pop	r13
 380:	cf 90       	pop	r12
 382:	08 95       	ret

Disassembly of section .text.itoa:

000000e6 <itoa>:
	char buffer[11];
	itoa(num, buffer, 10);
	LCD_String(buffer);
}

char* itoa(int value, char* result, int base) {
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	9c 01       	movw	r18, r24
  f4:	7b 01       	movw	r14, r22
  f6:	8a 01       	movw	r16, r20
	// Check that the base is valid
	if (base < 2 || base > 36) {
  f8:	ca 01       	movw	r24, r20
  fa:	02 97       	sbiw	r24, 0x02	; 2
  fc:	83 97       	sbiw	r24, 0x23	; 35
  fe:	18 f0       	brcs	.+6      	; 0x106 <itoa+0x20>
		*result = '\0';
 100:	db 01       	movw	r26, r22
 102:	1c 92       	st	X, r1
		return result;
 104:	3b c0       	rjmp	.+118    	; 0x17c <itoa+0x96>
 106:	eb 01       	movw	r28, r22
 108:	02 c0       	rjmp	.+4      	; 0x10e <itoa+0x28>
	int tmp_value;

	do {
		tmp_value = value;
		value /= base;
		*ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - value * base)];
 10a:	ea 01       	movw	r28, r20
	char* ptr = result, *ptr1 = result, tmp_char;
	int tmp_value;

	do {
		tmp_value = value;
		value /= base;
 10c:	9b 01       	movw	r18, r22
 10e:	c9 01       	movw	r24, r18
 110:	b8 01       	movw	r22, r16
 112:	0e 94 c2 01 	call	0x384	; 0x384 <__divmodhi4>
		*ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - value * base)];
 116:	ae 01       	movw	r20, r28
 118:	4f 5f       	subi	r20, 0xFF	; 255
 11a:	5f 4f       	sbci	r21, 0xFF	; 255
 11c:	06 9f       	mul	r16, r22
 11e:	c0 01       	movw	r24, r0
 120:	07 9f       	mul	r16, r23
 122:	90 0d       	add	r25, r0
 124:	16 9f       	mul	r17, r22
 126:	90 0d       	add	r25, r0
 128:	11 24       	eor	r1, r1
 12a:	f9 01       	movw	r30, r18
 12c:	e8 1b       	sub	r30, r24
 12e:	f9 0b       	sbc	r31, r25
 130:	cf 01       	movw	r24, r30
 132:	83 96       	adiw	r24, 0x23	; 35
 134:	09 2e       	mov	r0, r25
 136:	00 0c       	add	r0, r0
 138:	aa 0b       	sbc	r26, r26
 13a:	8c 56       	subi	r24, 0x6C	; 108
 13c:	9f 4f       	sbci	r25, 0xFF	; 255
 13e:	af 4f       	sbci	r26, 0xFF	; 255
 140:	fc 01       	movw	r30, r24
 142:	84 91       	lpm	r24, Z
 144:	a7 fd       	sbrc	r26, 7
 146:	80 81       	ld	r24, Z
 148:	88 83       	st	Y, r24
	} while (value);
 14a:	61 15       	cp	r22, r1
 14c:	71 05       	cpc	r23, r1
 14e:	e9 f6       	brne	.-70     	; 0x10a <itoa+0x24>

	// Apply negative sign
	if (tmp_value < 0) *ptr++ = '-';
 150:	33 23       	and	r19, r19
 152:	24 f4       	brge	.+8      	; 0x15c <itoa+0x76>
 154:	4f 5f       	subi	r20, 0xFF	; 255
 156:	5f 4f       	sbci	r21, 0xFF	; 255
 158:	8d e2       	ldi	r24, 0x2D	; 45
 15a:	89 83       	std	Y+1, r24	; 0x01
	*ptr-- = '\0';
 15c:	fa 01       	movw	r30, r20
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	da 01       	movw	r26, r20
 162:	1c 92       	st	X, r1
	if (base < 2 || base > 36) {
		*result = '\0';
		return result;
	}

	char* ptr = result, *ptr1 = result, tmp_char;
 164:	d7 01       	movw	r26, r14

	// Apply negative sign
	if (tmp_value < 0) *ptr++ = '-';
	*ptr-- = '\0';

	while (ptr1 < ptr) {
 166:	07 c0       	rjmp	.+14     	; 0x176 <itoa+0x90>
		tmp_char = *ptr;
 168:	80 81       	ld	r24, Z
		*ptr-- = *ptr1;
 16a:	ed 01       	movw	r28, r26
 16c:	99 91       	ld	r25, Y+
 16e:	90 83       	st	Z, r25
		*ptr1++ = tmp_char;
 170:	8c 93       	st	X, r24
 172:	de 01       	movw	r26, r28
	if (tmp_value < 0) *ptr++ = '-';
	*ptr-- = '\0';

	while (ptr1 < ptr) {
		tmp_char = *ptr;
		*ptr-- = *ptr1;
 174:	31 97       	sbiw	r30, 0x01	; 1

	// Apply negative sign
	if (tmp_value < 0) *ptr++ = '-';
	*ptr-- = '\0';

	while (ptr1 < ptr) {
 176:	ae 17       	cp	r26, r30
 178:	bf 07       	cpc	r27, r31
 17a:	b0 f3       	brcs	.-20     	; 0x168 <itoa+0x82>
		tmp_char = *ptr;
		*ptr-- = *ptr1;
		*ptr1++ = tmp_char;
	}
	return result;
}
 17c:	c7 01       	movw	r24, r14
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	ff 90       	pop	r15
 188:	ef 90       	pop	r14
 18a:	08 95       	ret

Disassembly of section .text.LCD_Number:

00000244 <LCD_Number>:
	while ((c = pgm_read_byte(str++))) {
		LCD_Char(c);
	}
}

void LCD_Number(unsigned long num) {
 244:	0f 93       	push	r16
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	2b 97       	sbiw	r28, 0x0b	; 11
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	de bf       	out	0x3e, r29	; 62
 258:	0f be       	out	0x3f, r0	; 63
 25a:	cd bf       	out	0x3d, r28	; 61
 25c:	dc 01       	movw	r26, r24
 25e:	cb 01       	movw	r24, r22
	char buffer[11];
	itoa(num, buffer, 10);
 260:	4a e0       	ldi	r20, 0x0A	; 10
 262:	50 e0       	ldi	r21, 0x00	; 0
 264:	8e 01       	movw	r16, r28
 266:	0f 5f       	subi	r16, 0xFF	; 255
 268:	1f 4f       	sbci	r17, 0xFF	; 255
 26a:	b8 01       	movw	r22, r16
 26c:	0e 94 73 00 	call	0xe6	; 0xe6 <itoa>
	LCD_String(buffer);
 270:	b8 01       	movw	r22, r16
 272:	80 e8       	ldi	r24, 0x80	; 128
 274:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_String>
}
 278:	2b 96       	adiw	r28, 0x0b	; 11
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	f8 94       	cli
 27e:	de bf       	out	0x3e, r29	; 62
 280:	0f be       	out	0x3f, r0	; 63
 282:	cd bf       	out	0x3d, r28	; 61
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	0f 91       	pop	r16
 28c:	08 95       	ret

Disassembly of section .text.main:

0000028e <main>:
// Declare a string in program memory
const char result_str[] PROGMEM = "Result: ";

int main(void) {
	// Initialize ports
	DDRA = 0x00; // PORTA as input
 28e:	11 b8       	out	0x01, r1	; 1
	DDRB = 0xFF; // PORTB as output
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	84 b9       	out	0x04, r24	; 4
	LCD_Init();  // Initialize LCD
 294:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_Init>
	
	while(1) {
		unsigned int input_value = PINA; // Read input from PORTA
 298:	20 b1       	in	r18, 0x00	; 0
		unsigned long result = input_value * 1000; // Multiply by 1000
 29a:	88 ee       	ldi	r24, 0xE8	; 232
 29c:	93 e0       	ldi	r25, 0x03	; 3
 29e:	28 9f       	mul	r18, r24
 2a0:	60 01       	movw	r12, r0
 2a2:	29 9f       	mul	r18, r25
 2a4:	d0 0c       	add	r13, r0
 2a6:	11 24       	eor	r1, r1
 2a8:	e1 2c       	mov	r14, r1
 2aa:	f1 2c       	mov	r15, r1
		
		LCD_Command(0x80); // Move cursor to the beginning of the first line
 2ac:	80 e8       	ldi	r24, 0x80	; 128
 2ae:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_Command>
		LCD_String_P(result_str); // Display "Result: " from program memory
 2b2:	6c ed       	ldi	r22, 0xDC	; 220
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	0e 94 aa 01 	call	0x354	; 0x354 <LCD_String_P>
		LCD_Number(result); // Display the result
 2bc:	c7 01       	movw	r24, r14
 2be:	b6 01       	movw	r22, r12
 2c0:	0e 94 22 01 	call	0x244	; 0x244 <LCD_Number>
 2c4:	2f e9       	ldi	r18, 0x9F	; 159
 2c6:	86 e8       	ldi	r24, 0x86	; 134
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	21 50       	subi	r18, 0x01	; 1
 2cc:	80 40       	sbci	r24, 0x00	; 0
 2ce:	90 40       	sbci	r25, 0x00	; 0
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <main+0x3c>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0x46>
 2d4:	00 00       	nop
 2d6:	e0 cf       	rjmp	.-64     	; 0x298 <main+0xa>

Disassembly of section .text.libgcc.div:

00000384 <__divmodhi4>:
 384:	97 fb       	bst	r25, 7
 386:	07 2e       	mov	r0, r23
 388:	16 f4       	brtc	.+4      	; 0x38e <__divmodhi4+0xa>
 38a:	00 94       	com	r0
 38c:	07 d0       	rcall	.+14     	; 0x39c <__divmodhi4_neg1>
 38e:	77 fd       	sbrc	r23, 7
 390:	09 d0       	rcall	.+18     	; 0x3a4 <__divmodhi4_neg2>
 392:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__udivmodhi4>
 396:	07 fc       	sbrc	r0, 7
 398:	05 d0       	rcall	.+10     	; 0x3a4 <__divmodhi4_neg2>
 39a:	3e f4       	brtc	.+14     	; 0x3aa <__divmodhi4_exit>

0000039c <__divmodhi4_neg1>:
 39c:	90 95       	com	r25
 39e:	81 95       	neg	r24
 3a0:	9f 4f       	sbci	r25, 0xFF	; 255
 3a2:	08 95       	ret

000003a4 <__divmodhi4_neg2>:
 3a4:	70 95       	com	r23
 3a6:	61 95       	neg	r22
 3a8:	7f 4f       	sbci	r23, 0xFF	; 255

000003aa <__divmodhi4_exit>:
 3aa:	08 95       	ret

Disassembly of section .text.libgcc.div:

000003ac <__udivmodhi4>:
 3ac:	aa 1b       	sub	r26, r26
 3ae:	bb 1b       	sub	r27, r27
 3b0:	51 e1       	ldi	r21, 0x11	; 17
 3b2:	07 c0       	rjmp	.+14     	; 0x3c2 <__udivmodhi4_ep>

000003b4 <__udivmodhi4_loop>:
 3b4:	aa 1f       	adc	r26, r26
 3b6:	bb 1f       	adc	r27, r27
 3b8:	a6 17       	cp	r26, r22
 3ba:	b7 07       	cpc	r27, r23
 3bc:	10 f0       	brcs	.+4      	; 0x3c2 <__udivmodhi4_ep>
 3be:	a6 1b       	sub	r26, r22
 3c0:	b7 0b       	sbc	r27, r23

000003c2 <__udivmodhi4_ep>:
 3c2:	88 1f       	adc	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	5a 95       	dec	r21
 3c8:	a9 f7       	brne	.-22     	; 0x3b4 <__udivmodhi4_loop>
 3ca:	80 95       	com	r24
 3cc:	90 95       	com	r25
 3ce:	bc 01       	movw	r22, r24
 3d0:	cd 01       	movw	r24, r26
 3d2:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000003f2 <_fini>:
 3f2:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000003f4 <__funcs_on_exit>:
 3f4:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000003f6 <__simulator_exit>:
 3f6:	08 95       	ret

Disassembly of section .text.exit:

000003d4 <exit>:
 3d4:	ec 01       	movw	r28, r24
 3d6:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__funcs_on_exit>
 3da:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <_fini>
 3de:	ce 01       	movw	r24, r28
 3e0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__simulator_exit>
 3e4:	ce 01       	movw	r24, r28
 3e6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_Exit>

Disassembly of section .text._Exit:

000003ee <_Exit>:
 3ee:	0e 94 48 00 	call	0x90	; 0x90 <_exit>
