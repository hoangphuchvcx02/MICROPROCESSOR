
pin change interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000218  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000247  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000255  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aa8  00000000  00000000  0000028d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000781  00000000  00000000  00000d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bf  00000000  00000000  000014b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001778  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000255  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008f  00000000  00000000  00001a35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000176  00000176  0000020a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.init_ports 00000014  00000158  00000158  000001ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.init_interrupts 00000018  0000012a  0000012a  000001be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_5 00000054  000000d6  000000d6  0000016a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    0000000a  0000016c  0000016c  00000200  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.button_pressed 00000001  00800100  00800100  00000218  2**0
                  ALLOC
 19 .bss.button_count 00000001  00800101  00800101  00000218  2**0
                  ALLOC
 20 .text.__dummy_fini 00000002  0000017e  0000017e  00000212  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_funcs_on_exit 00000002  00000180  00000180  00000214  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_simulator_exit 00000002  00000182  00000182  00000216  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.exit    00000016  00000142  00000142  000001d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text._Exit   00000004  0000017a  0000017a  0000020e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
   8:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
   c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  10:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_etext>
  18:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  1c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  20:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  24:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  28:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  2c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  30:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  34:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  38:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  3c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  40:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  44:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  48:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  4c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  50:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  54:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  58:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  5c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  60:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  64:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  68:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  6c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  70:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  74:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  78:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 02       	muls	r16, r17
  80:	80 00       	.word	0x0080	; ????

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf ef       	ldi	r28, 0xFF	; 255
  88:	d8 e0       	ldi	r29, 0x08	; 8
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	ec e7       	ldi	r30, 0x7C	; 124
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	17 c0       	rjmp	.+46     	; 0xc4 <__do_clear_bss+0x8>
  96:	b5 91       	lpm	r27, Z+
  98:	a5 91       	lpm	r26, Z+
  9a:	35 91       	lpm	r19, Z+
  9c:	25 91       	lpm	r18, Z+
  9e:	05 91       	lpm	r16, Z+
  a0:	07 fd       	sbrc	r16, 7
  a2:	0c c0       	rjmp	.+24     	; 0xbc <__do_clear_bss>
  a4:	95 91       	lpm	r25, Z+
  a6:	85 91       	lpm	r24, Z+
  a8:	ef 01       	movw	r28, r30
  aa:	f9 2f       	mov	r31, r25
  ac:	e8 2f       	mov	r30, r24
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	a2 17       	cp	r26, r18
  b4:	b3 07       	cpc	r27, r19
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0x20>
  b8:	fe 01       	movw	r30, r28
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <__do_clear_bss+0x8>

000000bc <__do_clear_bss>:
  bc:	1d 92       	st	X+, r1
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	e1 f7       	brne	.-8      	; 0xbc <__do_clear_bss>
  c4:	e1 38       	cpi	r30, 0x81	; 129
  c6:	f4 07       	cpc	r31, r20
  c8:	31 f7       	brne	.-52     	; 0x96 <__do_copy_data+0x8>
  ca:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  ce:	0c 94 a1 00 	jmp	0x142	; 0x142 <exit>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>

Disassembly of section .text:

00000176 <__bad_interrupt>:
 176:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.init_ports:

00000158 <init_ports>:

volatile uint8_t button_count = 0;
volatile uint8_t button_pressed = 0;

void init_ports() {
	DDRB &= ~(1 << PB0);
 158:	84 b1       	in	r24, 0x04	; 4
 15a:	8e 7f       	andi	r24, 0xFE	; 254
 15c:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB0);
 15e:	85 b1       	in	r24, 0x05	; 5
 160:	81 60       	ori	r24, 0x01	; 1
 162:	85 b9       	out	0x05, r24	; 5
	
	DDRC = 0xFF;
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
 168:	18 b8       	out	0x08, r1	; 8
 16a:	08 95       	ret

Disassembly of section .text.init_interrupts:

0000012a <init_interrupts>:
}

void init_interrupts() {
	// pin change interrupt for PA0
	PCICR |= (1 << PCIE0) | (1<<PCIE1) ;  // pin change interrupt for PCINT[7:0]
 12a:	e8 e6       	ldi	r30, 0x68	; 104
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	83 60       	ori	r24, 0x03	; 3
 132:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8); // Enabl pin change interrupt for PA0 (PCINT0)
 134:	ec e6       	ldi	r30, 0x6C	; 108
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	81 60       	ori	r24, 0x01	; 1
 13c:	80 83       	st	Z, r24
	
	sei(); // Enable global interrupts
 13e:	78 94       	sei
 140:	08 95       	ret

Disassembly of section .text.__vector_5:

000000d6 <__vector_5>:
}

ISR(PCINT1_vect) {
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
	if (!(PINB & (1 << PB0))) { // Check if button is pressed (active low)
  e4:	18 99       	sbic	0x03, 0	; 3
  e6:	18 c0       	rjmp	.+48     	; 0x118 <__vector_5+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	83 ed       	ldi	r24, 0xD3	; 211
  ea:	90 e3       	ldi	r25, 0x30	; 48
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <__vector_5+0x16>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <__vector_5+0x1c>
  f2:	00 00       	nop
		_delay_ms(50); // Simple debouncing (delay)
		if (!(PINB & (1 << PB0))) { // Check again after debouncing
  f4:	18 99       	sbic	0x03, 0	; 3
  f6:	12 c0       	rjmp	.+36     	; 0x11c <__vector_5+0x46>
			if (!button_pressed) { // Check if button was previously released
  f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fc:	81 11       	cpse	r24, r1
  fe:	0e c0       	rjmp	.+28     	; 0x11c <__vector_5+0x46>
				button_pressed = 1; // Mark button as pressed
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				button_count++; // Increment button count
 106:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button_count>
 10a:	8f 5f       	subi	r24, 0xFF	; 255
 10c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <button_count>
				PORTC = button_count; // Output count to PORTC
 110:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button_count>
 114:	88 b9       	out	0x08, r24	; 8
 116:	02 c0       	rjmp	.+4      	; 0x11c <__vector_5+0x46>
			}
		}
		} else {
		button_pressed = 0; // Reset button state when released
 118:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

Disassembly of section .text.main:

0000016c <main>:

int main(void) {
	init_ports();
 16c:	0e 94 ac 00 	call	0x158	; 0x158 <init_ports>
	init_interrupts();
 170:	0e 94 95 00 	call	0x12a	; 0x12a <init_interrupts>
 174:	ff cf       	rjmp	.-2      	; 0x174 <main+0x8>

Disassembly of section .text.__dummy_fini:

0000017e <_fini>:
 17e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000180 <__funcs_on_exit>:
 180:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000182 <__simulator_exit>:
 182:	08 95       	ret

Disassembly of section .text.exit:

00000142 <exit>:
 142:	ec 01       	movw	r28, r24
 144:	0e 94 c0 00 	call	0x180	; 0x180 <__funcs_on_exit>
 148:	0e 94 bf 00 	call	0x17e	; 0x17e <_fini>
 14c:	ce 01       	movw	r24, r28
 14e:	0e 94 c1 00 	call	0x182	; 0x182 <__simulator_exit>
 152:	ce 01       	movw	r24, r28
 154:	0e 94 bd 00 	call	0x17a	; 0x17a <_Exit>

Disassembly of section .text._Exit:

0000017a <_Exit>:
 17a:	0e 94 69 00 	call	0xd2	; 0xd2 <_exit>
