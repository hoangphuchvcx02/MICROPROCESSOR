
extend_16bit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fc  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000094  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  0000022b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000247  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a0c  00000000  00000000  0000026f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074c  00000000  00000000  00000c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023f  00000000  00000000  000013c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001608  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000255  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  000018a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001955  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000017a  0000017a  000001ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001970  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.store_decimal_digits 000000a8  00000094  00000094  00000108  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000000a  00000170  00000170  000001e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.libgcc.mul 0000001e  0000013c  0000013c  000001b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  00000182  00000182  000001f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  00000184  00000184  000001f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  00000186  00000186  000001fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  0000015a  0000015a  000001ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  0000017e  0000017e  000001f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
   8:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
   c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  10:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  14:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  18:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  1c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  20:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  24:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  28:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  2c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  30:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  34:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  38:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  3c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  40:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  44:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  48:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  4c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  50:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  54:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  58:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  5c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  60:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  64:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  68:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  6c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  70:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  74:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
  78:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  8c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <exit>

00000090 <_exit>:
  90:	f8 94       	cli

00000092 <__stop_program>:
  92:	ff cf       	rjmp	.-2      	; 0x92 <__stop_program>

Disassembly of section .text:

0000017a <__bad_interrupt>:
 17a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.store_decimal_digits:

00000094 <store_decimal_digits>:
#include <avr/io.h>

#define SRAM_ADDR_START 0x0200

void store_decimal_digits(uint16_t value) {
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	00 d0       	rcall	.+0      	; 0x9a <store_decimal_digits+0x6>
  9a:	00 d0       	rcall	.+0      	; 0x9c <store_decimal_digits+0x8>
  9c:	0f 92       	push	r0
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	fc 01       	movw	r30, r24
	uint8_t digits[5];
	
	// Chia giá tr? thành t?ng ch? s?
	for (int i = 4; i >= 0; i--) {
  a4:	44 e0       	ldi	r20, 0x04	; 4
  a6:	50 e0       	ldi	r21, 0x00	; 0
  a8:	2e c0       	rjmp	.+92     	; 0x106 <store_decimal_digits+0x72>
		digits[i] = value % 10;  // L?y ch? s? cu?i cùng
  aa:	9f 01       	movw	r18, r30
  ac:	ad ec       	ldi	r26, 0xCD	; 205
  ae:	bc ec       	ldi	r27, 0xCC	; 204
  b0:	0e 94 9e 00 	call	0x13c	; 0x13c <__umulhisi3>
  b4:	96 95       	lsr	r25
  b6:	87 95       	ror	r24
  b8:	96 95       	lsr	r25
  ba:	87 95       	ror	r24
  bc:	96 95       	lsr	r25
  be:	87 95       	ror	r24
  c0:	9c 01       	movw	r18, r24
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	82 0f       	add	r24, r18
  d4:	93 1f       	adc	r25, r19
  d6:	9f 01       	movw	r18, r30
  d8:	28 1b       	sub	r18, r24
  da:	39 0b       	sbc	r19, r25
  dc:	a1 e0       	ldi	r26, 0x01	; 1
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	ac 0f       	add	r26, r28
  e2:	bd 1f       	adc	r27, r29
  e4:	a4 0f       	add	r26, r20
  e6:	b5 1f       	adc	r27, r21
  e8:	2c 93       	st	X, r18
		value /= 10;             // Chia cho 10 ?? l?y ch? s? ti?p theo
  ea:	9f 01       	movw	r18, r30
  ec:	ad ec       	ldi	r26, 0xCD	; 205
  ee:	bc ec       	ldi	r27, 0xCC	; 204
  f0:	0e 94 9e 00 	call	0x13c	; 0x13c <__umulhisi3>
  f4:	fc 01       	movw	r30, r24
  f6:	f6 95       	lsr	r31
  f8:	e7 95       	ror	r30
  fa:	f6 95       	lsr	r31
  fc:	e7 95       	ror	r30
  fe:	f6 95       	lsr	r31
 100:	e7 95       	ror	r30

void store_decimal_digits(uint16_t value) {
	uint8_t digits[5];
	
	// Chia giá tr? thành t?ng ch? s?
	for (int i = 4; i >= 0; i--) {
 102:	41 50       	subi	r20, 0x01	; 1
 104:	51 09       	sbc	r21, r1
 106:	55 23       	and	r21, r21
 108:	84 f6       	brge	.-96     	; 0xaa <store_decimal_digits+0x16>
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0b c0       	rjmp	.+22     	; 0x126 <store_decimal_digits+0x92>
		value /= 10;             // Chia cho 10 ?? l?y ch? s? ti?p theo
	}
	
	// L?u các ch? s? vào SRAM
	for (int i = 0; i < 5; i++) {
		*(volatile uint8_t *)(SRAM_ADDR_START + i) = digits[i];
 110:	dc 01       	movw	r26, r24
 112:	be 5f       	subi	r27, 0xFE	; 254
 114:	e1 e0       	ldi	r30, 0x01	; 1
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	ec 0f       	add	r30, r28
 11a:	fd 1f       	adc	r31, r29
 11c:	e8 0f       	add	r30, r24
 11e:	f9 1f       	adc	r31, r25
 120:	20 81       	ld	r18, Z
 122:	2c 93       	st	X, r18
		digits[i] = value % 10;  // L?y ch? s? cu?i cùng
		value /= 10;             // Chia cho 10 ?? l?y ch? s? ti?p theo
	}
	
	// L?u các ch? s? vào SRAM
	for (int i = 0; i < 5; i++) {
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	85 30       	cpi	r24, 0x05	; 5
 128:	91 05       	cpc	r25, r1
 12a:	94 f3       	brlt	.-28     	; 0x110 <store_decimal_digits+0x7c>
		*(volatile uint8_t *)(SRAM_ADDR_START + i) = digits[i];
	}
}
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

Disassembly of section .text.main:

00000170 <main>:

int main(void) {
	uint16_t value = 0xFEDC;
	
	store_decimal_digits(value);
 170:	8c ed       	ldi	r24, 0xDC	; 220
 172:	9e ef       	ldi	r25, 0xFE	; 254
 174:	0e 94 4a 00 	call	0x94	; 0x94 <__data_load_end>
 178:	ff cf       	rjmp	.-2      	; 0x178 <main+0x8>

Disassembly of section .text.libgcc.mul:

0000013c <__umulhisi3>:
 13c:	a2 9f       	mul	r26, r18
 13e:	b0 01       	movw	r22, r0
 140:	b3 9f       	mul	r27, r19
 142:	c0 01       	movw	r24, r0
 144:	a3 9f       	mul	r26, r19
 146:	70 0d       	add	r23, r0
 148:	81 1d       	adc	r24, r1
 14a:	11 24       	eor	r1, r1
 14c:	91 1d       	adc	r25, r1
 14e:	b2 9f       	mul	r27, r18
 150:	70 0d       	add	r23, r0
 152:	81 1d       	adc	r24, r1
 154:	11 24       	eor	r1, r1
 156:	91 1d       	adc	r25, r1
 158:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000182 <_fini>:
 182:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000184 <__funcs_on_exit>:
 184:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000186 <__simulator_exit>:
 186:	08 95       	ret

Disassembly of section .text.exit:

0000015a <exit>:
 15a:	ec 01       	movw	r28, r24
 15c:	0e 94 c2 00 	call	0x184	; 0x184 <__funcs_on_exit>
 160:	0e 94 c1 00 	call	0x182	; 0x182 <_fini>
 164:	ce 01       	movw	r24, r28
 166:	0e 94 c3 00 	call	0x186	; 0x186 <__simulator_exit>
 16a:	ce 01       	movw	r24, r28
 16c:	0e 94 bf 00 	call	0x17e	; 0x17e <_Exit>

Disassembly of section .text._Exit:

0000017e <_Exit>:
 17e:	0e 94 48 00 	call	0x90	; 0x90 <_exit>
