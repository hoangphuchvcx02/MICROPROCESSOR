//set 0xaa to sram addr from 0x01FA to 0x0346 
LDI R16, 0xAA
LDI YL, 0xFA
LDI YH, 0x01
LDI XH, 0x03
LDI XL, 0X47

LAPLAI:
	ST Y+, R16
	CP XH, YH
	BRNE LAPLAI
	CP XL, YL
	BRNE LAPLAI 
	// DONE SET SRAM 

//SET 0XFF TO PORTA IF MEM = 0XAA ADDR FROM 0X1FA TO 0X203 OTHERWISE PORTA = 0b01010101
LDI R16, 0XFF
OUT DDRA, R16

LDI R16, 0xAA
MOV R2, R16		//R2=0XAA
LDI R16, 0b01010101
MOV R3, R16
LDI R16, 0xFF
MOV R4, R16		//R2=0XAA

LDI YL, 0xFA
LDI YH, 0x01
LDI XH, 0x02
LDI XL, 0X04	

LAPLAI_2:
LD R17, Y+
CP R17, R2
BRNE KHAC
OUT PORTA, R4
MOV R30, R4
JMP COM_ADDR

KHAC:
	OUT PORTA, R3
	MOV R30, R3
	COM_ADDR:
		CP YH, XH
		BRNE LAPLAI_2
		CP YL, XL
		BRNE LAPLAI_2

	END:
	RJMP END



/*
LDI R16, 0XFF
OUT DDRA, R16

LDI R16, 0xAA
LDI YL, 0x00
LDI YH, 0x01
LDI R18, 2

LP2:
	LDI R17, 255	
	LP: 
		ST Y+, R16 
		DEC R17
		BRNE LP
	DEC R18
	BRNE LP2
	ST Y+, R16
//END:
//	JMP END



; from 0x0100 to 0x02FF
LDI R20,2


LDI R16, 0xAA
LDI ZL, 0x00     
LDI ZH, 0x01
CLR R19           
    LD R17, Z    
CHECK_2:
	LDI R21,255
CHECK_MEMORY:
	LD R17, Z
    CP R17, R16  
		//LDI R19, 0xFF  
		RJMP MATCH
		LDI R19, 0x00
		OUT PORTA, R19
	CONTINUE:
	INC ZL
	DEC R21
	BRNE CHECK_MEMORY 
	DEC R20
	BRNE CHECK_2  
	END:  
		INC ZL
		LD R17, Z
		CP R17, R16  
		
		RJMP MATCH
		LDI R19, 0x00
		OUT PORTA, R19
		END_2:
	RJMP END_2
	
MATCH:
	LDI R19, 0xFF
    OUT PORTA, R19
	RJMP  CONTINUE
*/
	
